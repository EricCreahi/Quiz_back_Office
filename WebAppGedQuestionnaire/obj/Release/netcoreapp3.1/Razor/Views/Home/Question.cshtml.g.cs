#pragma checksum "C:\Workspace\WebAppGedQuestionnaireV2\WebAppGedQuestionnaire\Views\Home\Question.cshtml" "{8829d00f-11b8-4213-878b-770e8597ac16}" "b75074136d7285ec8f3e970a5639722885296fe0674af4ed21d9a173156a0bc0"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Home_Question), @"mvc.1.0.view", @"/Views/Home/Question.cshtml")]
namespace AspNetCore
{
    #line hidden
    using global::System;
    using global::System.Collections.Generic;
    using global::System.Linq;
    using global::System.Threading.Tasks;
    using global::Microsoft.AspNetCore.Mvc;
    using global::Microsoft.AspNetCore.Mvc.Rendering;
    using global::Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "C:\Workspace\WebAppGedQuestionnaireV2\WebAppGedQuestionnaire\Views\_ViewImports.cshtml"
using WebAppGedQuestionnaire;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Workspace\WebAppGedQuestionnaireV2\WebAppGedQuestionnaire\Views\_ViewImports.cshtml"
using WebAppGedQuestionnaire.Models;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA256", @"b75074136d7285ec8f3e970a5639722885296fe0674af4ed21d9a173156a0bc0", @"/Views/Home/Question.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA256", @"2c6fe54c853d40c83a5de5742da48b229a08f3961511dc69cfb4c3265a1630fd", @"/Views/_ViewImports.cshtml")]
    #nullable restore
    public class Views_Home_Question : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    #nullable disable
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
#nullable restore
#line 1 "C:\Workspace\WebAppGedQuestionnaireV2\WebAppGedQuestionnaire\Views\Home\Question.cshtml"
  
    ViewData["Title"] = "Questionnaire";
   

#line default
#line hidden
#nullable disable
            WriteLiteral(@"

<div class=""container"">

    <div class=""row justify-content-center"">        
            <div class=""row"">
                <div class=""col-12"">
                    <div class=""text-center"">

                        <h1 class=""display-4"" style=""font-family: LoveStoryRough; color: #FD3F92;"">
                            QUESTIONNAIRE
                        </h1>
                        <p>
                            Veuillez répondre à la question puis cliquez sur <span style=""font-style:italic"">Suivant</span> pour avancer. <br />
                            Cochez sur la ou les bonnes réponses.
                        </p>
                        <div id=""positioin_question""></div>
                    </div>
                </div>       
            </div>       
     </div>

    <div class=""row justify-content-center"">
        <div class=""row"">
            <div class=""col-12"">
                <div class=""card"">

                    <div id=""question""></div>
                    ");
            WriteLiteral(@"<div class=""card-body"">
                        <div style=""padding-left:15px"">
                            <div id=""listeChoix"">

                            </div>

                        </div>
                    </div>

                    <div class=""card-footer "">
                        <div class=""row"">
                            <div class=""col-6"">
                                <div class=""row justify-content-start"">
                                    <a id=""suivant"" onclick=""callQuestion()"" class="" btn btn-primary"">Suivant</a>
                                </div>
                            </div>

                            <div class=""col-6"">
                                <div class=""row justify-content-end"">
                                    <a id=""lienValider"" onclick=""callValider()"" hidden class=""btn btn-success"">Terminer</a>
                                </div>                               
                            </div>

                        </div");
            WriteLiteral(">                    \r\n                        \r\n                    </div>\r\n\r\n\r\n                </div>\r\n        </div>\r\n    </div>\r\n</div>\r\n</div>\r\n\r\n");
            DefineSection("Scripts", async() => {
                WriteLiteral("\r\n\r\n    <script type=\"text/javascript\">\r\n\r\n        var usermatricule = \'\';\r\n        var nbre_question = 0;\r\n        var question = ");
#nullable restore
#line 73 "C:\Workspace\WebAppGedQuestionnaireV2\WebAppGedQuestionnaire\Views\Home\Question.cshtml"
                  Write(ViewData["item"]);

#line default
#line hidden
#nullable disable
                WriteLiteral(";\r\n        var page_suivante = ");
#nullable restore
#line 74 "C:\Workspace\WebAppGedQuestionnaireV2\WebAppGedQuestionnaire\Views\Home\Question.cshtml"
                       Write(ViewData["page"]);

#line default
#line hidden
#nullable disable
                WriteLiteral(";\r\n        var page_actuelle =  ");
#nullable restore
#line 75 "C:\Workspace\WebAppGedQuestionnaireV2\WebAppGedQuestionnaire\Views\Home\Question.cshtml"
                        Write(ViewData["page"]);

#line default
#line hidden
#nullable disable
                WriteLiteral(@";
        var cocher = 0;
        const cocherTampon = {
            date_Cocher: '',
            matricule: '',
            choixId: '',
            page: '',
            questionId: '',
            suivant:'',
            precedent: ''
        };

        listeCocher = [];
        var listeCocher2 = [];
        let compteur = 0;
        var now = new Date();
        var userCreationDate = moment(now, 'DD/MM/YYYY hh:mm:ss', true).format();

        $(""#deConnexion"").attr('hidden', false);
        $(""#connexion"").attr('hidden', true);


        $(function () {

            usermatricule = localStorage.getItem(""usermatricule"");

            $.ajax({
                'async': false,
                'global': false,
                'type': 'GET',
                'url': '");
#nullable restore
#line 105 "C:\Workspace\WebAppGedQuestionnaireV2\WebAppGedQuestionnaire\Views\Home\Question.cshtml"
                   Write(Url.Action("ReponseSousQuestion", "Home"));

#line default
#line hidden
#nullable disable
                WriteLiteral(@"' + ""?id="" + question,
                'dataType': ""json"",
                'success': function (response) {

                    nbre_question = response.data.length;


                    $('#positioin_question').html(`<h3>Question N° : ${page_suivante} / ${nbre_question}</h3>`);

                    $('#question').html( `
                                           <h5 class=""card-header"" style=""font-family: LoveStoryRough; color: #03224c;"">
                                              ${response.oneData.libelle_Question}
                                            </h5>
                                        `);

                    if (page_suivante == nbre_question) {

                        $('#lienValider').attr('hidden', false);

                        $('#suivant').attr('hidden', true);
                    }

                    const choix = response.oneData.choixes;

                    page_suivante ++;


                    if (choix.length > 0) {

                ");
                WriteLiteral(@"        choix.forEach(element => {
                            compteur++;
                             $(""#listeChoix"").append(
                                '<div class=""form-check"">' +
                                '<input class= ""form-check-input"" type = ""checkbox"" value = ""' + element.choixId + '"" id=""CheckBox_' + compteur + '"">' +
                                '<label class=""form-check-label"" for=""flexCheckDefault"">'
                                + element.libelle_Choix +
                                '</label >' +
                                '<div>'
                                )
                            }
                        );
                        };

                            },
                            error: function (data) {
                                    console.log(data);

                           }
                     });

            switch (compteur) {

                case 2 :
                    callCocheTampon(2);
          ");
                WriteLiteral(@"          break;

                case 3:
                    callCocheTampon(3);
                    break;

                case 4:
                    callCocheTampon(4);
                    break;

                case 5:
                    callCocheTampon(5);
                    break;

            }

         });

        function callQuestion() {

            	     $.ajax({
                     'async': false,
                     'global': false,
                     'type': 'GET',
                     'url': '");
#nullable restore
#line 183 "C:\Workspace\WebAppGedQuestionnaireV2\WebAppGedQuestionnaire\Views\Home\Question.cshtml"
                        Write(Url.Action("ChoixQuestion", "Home"));

#line default
#line hidden
#nullable disable
                WriteLiteral("\' + \"?id=\" + page_suivante,\r\n                     \'dataType\': \"json\",\r\n                     \'success\': function (response) {\r\n                            var numero = response.oneData.questionId;\r\n                            var url = \'");
#nullable restore
#line 187 "C:\Workspace\WebAppGedQuestionnaireV2\WebAppGedQuestionnaire\Views\Home\Question.cshtml"
                                  Write(Url.Action("Question", "Home"));

#line default
#line hidden
#nullable disable
                WriteLiteral(@"' + ""?page="" + page_suivante + ""&id="" + numero;
                            window.location.href = url;
                     },
                     error: function (data) {
                           console.log(data);

                     }
                     });

                     saveCocheTampon();
        }

        function callValider() {

                saveCocheTampon();

                saveCoche(usermatricule);

                saveLotCocher(listeCocher2);

                listeCocher = [];

                deleteCocheTampon(usermatricule);



                var url = '");
#nullable restore
#line 213 "C:\Workspace\WebAppGedQuestionnaireV2\WebAppGedQuestionnaire\Views\Home\Question.cshtml"
                      Write(Url.Action("Valider", "Home"));

#line default
#line hidden
#nullable disable
                WriteLiteral(@"';
                window.location.href = url;
        }

        function saveCoche(matricule) {
            if (matricule) {

                            $.ajax({
                           'async': false,
                           'global': false,
                           'type': 'GET',
                           'url': '");
#nullable restore
#line 224 "C:\Workspace\WebAppGedQuestionnaireV2\WebAppGedQuestionnaire\Views\Home\Question.cshtml"
                              Write(Url.Action("ListeCocherTampon", "Home"));

#line default
#line hidden
#nullable disable
                WriteLiteral(@"' + ""?matricule="" + matricule,
                           'dataType': ""json"",
                           'success': function (response) {

                               response.data.forEach(element => {
                                   let cocher = {};
                                   cocher = {
                                       date_Cocher: element.date_Cocher,
                                       matricule: element.matricule,
                                       choixId: element.choixId
                                   };
                                   listeCocher2.push(cocher);
                                });

                           },
                             error: function (data) {
                                   console.log(data);

                             }
                           });
            }
        }

        function deleteCocheTampon(matricule) {

            if (matricule) {


                   $.ajax({
               ");
                WriteLiteral("            \'async\': false,\r\n                           \'global\': false,\r\n                           \'type\': \'GET\',\r\n                           \'url\': \'");
#nullable restore
#line 256 "C:\Workspace\WebAppGedQuestionnaireV2\WebAppGedQuestionnaire\Views\Home\Question.cshtml"
                              Write(Url.Action("FindCocherTamponForDelete", "Home"));

#line default
#line hidden
#nullable disable
                WriteLiteral(@"' + ""?matricule="" + matricule,
                           'dataType': ""json"",
                           'success': function (response) {
                               console.log(response);
                           

                           },
                             error: function (data) {
                                   console.log(data);

                             }
                           });

            }
        }

        function saveLotCocher(listeCocher2) {
            var data = JSON.stringify( listeCocher2 );

             //--- enregistrer element par element dans ta ble Cocher
                           $.ajax({
                               type: ""POST"",
                               url: '");
#nullable restore
#line 278 "C:\Workspace\WebAppGedQuestionnaireV2\WebAppGedQuestionnaire\Views\Home\Question.cshtml"
                                Write(Url.Action("AjouterCocher", "Home"));

#line default
#line hidden
#nullable disable
                WriteLiteral(@"',
                               traditional: true,
                               data: data,
                               contentType: ""application/json; charset=utf-8"",
                                success: function (response) {
                                         console.log(response);

                               },
                                error: function (data) {
                                   console.log(data);
                                }
                          });
        }

        function saveCocheTampon() {
            listeCocher.forEach(element => {

                if (element) {


                             $.ajax({
                                       'type':'POST',
                                       'url': '");
#nullable restore
#line 300 "C:\Workspace\WebAppGedQuestionnaireV2\WebAppGedQuestionnaire\Views\Home\Question.cshtml"
                                          Write(Url.Action("CocherTampon", "Home"));

#line default
#line hidden
#nullable disable
                WriteLiteral(@"',
                                       'data':element,
                                       'dataType': ""json"",
                                        'success': function (response) {

                                            console.log(response);

                                        },
                                         error: function (data) {
                                               console.log(data);
                                         }
                                 });


                        };

                }

            );
        }

        function callCocheTampon(_a){


            switch (_a) {

                case 2:

                    $('#CheckBox_1').on('change', function () {
                        if (this.checked) {
                            listeCocher.push({ date_Cocher: userCreationDate, matricule: usermatricule, choixId: this.value, page: page_actuelle, questionId: question, suivant: true, precedent: false })
 ");
                WriteLiteral(@"                       } else {
                            let v = listeCocher.findIndex(el => el.choixId == this.value);
                            listeCocher.splice(v, 1);
                        }
                    });

                    $('#CheckBox_2').on('change', function () {
                        if (this.checked) {
                            listeCocher.push({ date_Cocher: userCreationDate, matricule: usermatricule, choixId: this.value, page: page_actuelle, questionId: question, suivant: true, precedent: false })
                        } else {
                            let v = listeCocher.findIndex(el => el.choixId == this.value);
                            listeCocher.splice(v, 1);
                        }
                    });

                    break;

                case 3:

                    $('#CheckBox_1').on('change', function () {
                        if (this.checked) {
                            listeCocher.push({ date_Cocher: userCreationDa");
                WriteLiteral(@"te, matricule: usermatricule, choixId: this.value, page: page_actuelle, questionId: question, suivant: true, precedent: false })
                        } else {
                            let v = listeCocher.findIndex(el => el.choixId == this.value);
                            listeCocher.splice(v, 1);
                        }
                    });

                    $('#CheckBox_2').on('change', function () {
                        if (this.checked) {
                            listeCocher.push({ date_Cocher: userCreationDate, matricule: usermatricule, choixId: this.value, page: page_actuelle, questionId: question, suivant: true, precedent: false })
                        } else {
                            let v = listeCocher.findIndex(el => el.choixId == this.value);
                            listeCocher.splice(v, 1);
                        }
                    });

                    $('#CheckBox_3').on('change', function () {
                        if (this.checked) {
");
                WriteLiteral(@"                            listeCocher.push({ date_Cocher: userCreationDate, matricule: usermatricule, choixId: this.value, page: page_actuelle, questionId: question, suivant: true, precedent: false })
                        } else {
                            let v = listeCocher.findIndex(el => el.choixId == this.value);
                            listeCocher.splice(v, 1);
                        }
                    });

                    break;

                case 4:

                    $('#CheckBox_1').on('change', function () {
                        if (this.checked) {
                            listeCocher.push({ date_Cocher: userCreationDate, matricule: usermatricule, choixId: this.value, page: page_actuelle, questionId: question, suivant: true, precedent: false })
                        } else {
                            let v = listeCocher.findIndex(el => el.choixId == this.value);
                            listeCocher.splice(v,1);
                        }

     ");
                WriteLiteral(@"               });

                    $('#CheckBox_2').on('change', function () {
                        if (this.checked) {
                            listeCocher.push({ date_Cocher: userCreationDate, matricule: usermatricule, choixId: this.value, page: page_actuelle, questionId: question, suivant: true, precedent: false })

                        } else {
                            let v = listeCocher.findIndex(el => el.choixId == this.value);
                            listeCocher.splice(v, 1);
                        }
                    });

                    $('#CheckBox_3').on('change', function () {
                        if (this.checked) {
                            listeCocher.push({ date_Cocher: userCreationDate, matricule: usermatricule, choixId: this.value, page: page_actuelle, questionId: question, suivant: true, precedent: false })

                        } else {
                            let v = listeCocher.findIndex(el => el.choixId == this.value);
         ");
                WriteLiteral(@"                   listeCocher.splice(v, 1);
                        }


                    });

                    $('#CheckBox_4').on('change', function () {
                        if (this.checked) {
                            listeCocher.push({ date_Cocher: userCreationDate, matricule: usermatricule, choixId: this.value, page: page_actuelle, questionId: question, suivant: true, precedent: false })

                        } else {
                            let v = listeCocher.findIndex(el => el.choixId == this.value);
                            listeCocher.splice(v, 1);
                        }


                    });

                    break;

                case 5:

                    $('#CheckBox_1').on('change', function () {
                        if (this.checked) {
                            listeCocher.push({ date_Cocher: userCreationDate, matricule: usermatricule, choixId: this.value, page: page_actuelle, questionId: question, suivant: true, precedent: fals");
                WriteLiteral(@"e })
                        } else {
                            let v = listeCocher.findIndex(el => el.choixId == this.value);
                            listeCocher.splice(v, 1);
                        }
                    });

                    $('#CheckBox_2').on('change', function () {
                        if (this.checked) {
                            listeCocher.push({ date_Cocher: userCreationDate, matricule: usermatricule, choixId: this.value, page: page_actuelle, questionId: question, suivant: true, precedent: false })
                        } else {
                            let v = listeCocher.findIndex(el => el.choixId == this.value);
                            listeCocher.splice(v, 1);
                        }
                    });

                    $('#CheckBox_3').on('change', function () {
                        if (this.checked) {
                            listeCocher.push({ date_Cocher: userCreationDate, matricule: usermatricule, choixId: this.value,");
                WriteLiteral(@" page: page_actuelle, questionId: question, suivant: true, precedent: false })
                        } else {
                            let v = listeCocher.findIndex(el => el.choixId == this.value);
                            listeCocher.splice(v, 1);
                        }
                    });

                    $('#CheckBox_4').on('change', function () {
                        if (this.checked) {
                            listeCocher.push({ date_Cocher: userCreationDate, matricule: usermatricule, choixId: this.value, page: page_actuelle, questionId: question, suivant: true, precedent: false })
                        } else {
                            let v = listeCocher.findIndex(el => el.choixId == this.value);
                            listeCocher.splice(v, 1);
                        }
                    });

                    $('#CheckBox_5').on('change', function () {
                        if (this.checked) {
                            listeCocher.push({ dat");
                WriteLiteral(@"e_Cocher: userCreationDate, matricule: usermatricule, choixId: this.value, page: page_actuelle, questionId: question, suivant: true, precedent: false })
                        } else {
                            let v = listeCocher.findIndex(el => el.choixId == this.value);
                            listeCocher.splice(v, 1);
                        }
                    });

                    break;

            }

        }

    </script>


");
            }
            );
        }
        #pragma warning restore 1998
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; } = default!;
        #nullable disable
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; } = default!;
        #nullable disable
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; } = default!;
        #nullable disable
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; } = default!;
        #nullable disable
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; } = default!;
        #nullable disable
    }
}
#pragma warning restore 1591
